### Use this site below to practice your regex
https://regexr.com/
https://regex101.com/

+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| Command        | Description                                                       | Example                                       |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| .               | Matches any character except a newline.                           | `a.c` matches "abc", "axc", but not "ac"      |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| ^               | Anchors the match to the start of the string.                     | `^abc` matches "abc" at the start of a string |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| $               | Anchors the match to the end of the string.                       | `abc$` matches "abc" at the end of a string   |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| *               | Matches the preceding element zero or more times (greedy).        | `a*` matches "", "a", "aa", "aaa", etc.       |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| +               | Matches the preceding element one or more times (greedy).         | `a+` matches "a", "aa", "aaa", etc., but not ""|
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| ?               | Matches the preceding element zero or one time (greedy).          | `a?` matches "", "a"                          |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| {n,m}           | Matches the preceding element at least n times but at most m times.| `a{2,4}` matches "aa", "aaa", "aaaa"          |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| []              | Matches any one of the characters inside the brackets.            | `[abc]` matches "a", "b", or "c"              |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| [^]             | Matches any character except those inside the brackets.           | `[^abc]` matches any character except "a", "b", "c"|
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| |               | OR operator: Matches the expression on the left or the right.     | `abc|def` matches "abc" or "def"              |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| ()              | Groups multiple characters or expressions together.               | `(abc)+` matches "abc", "abcabc", etc.        |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| \               | Escape character to match special characters literally.           | `\.` matches a literal dot (.)                |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| \d              | Matches any digit (0-9).                                          | `\d` matches "3", "8", "0"                    |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| \D              | Matches any character that is not a digit.                       | `\D` matches "a", "b", " ", etc.              |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| \w              | Matches any word character (alphanumeric + underscore).           | `\w` matches "a", "b", "A", "1", "_"          |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| \W              | Matches any character that is not a word character.              | `\W` matches spaces, punctuation, etc.        |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| \s              | Matches any whitespace character (spaces, tabs, newlines).        | `\s` matches " ", "\t", "\n", etc.            |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| \S              | Matches any non-whitespace character.                             | `\S` matches "a", "b", "1", etc.              |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| (?i)            | Case-insensitive flag modifier.                                  | `(?i)abc` matches "abc", "ABC", "AbC", etc.   |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| (?:...)         | Non-capturing group (no backreference).                           | `(?:abc)+` matches "abcabc", but doesn't capture it|
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| (?...)          | Capturing group (captures the match for later use).              | `(abc)` captures "abc"                       |
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| \b              | Matches a word boundary (position between word and non-word).     | `\bcat\b` matches "cat" in "a cat", but not in "scatter"|
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+
| \B              | Matches a non-word boundary (inside a word).                      | `\Bcat\B` matches "cat" in "scattered", but not in "a cat"|
+-----------------+-------------------------------------------------------------------+-----------------------------------------------+


Quick Explanation of Special Commands:
Anchors: ^ (start of string) and $ (end of string).
Quantifiers: * (zero or more), + (one or more), ? (zero or one), {n,m} (n to m times).
Character Classes: [] matches specific characters, [^] excludes specific characters.
Special Shorthands: \d (digit), \w (word character), \s (whitespace).
Capturing & Grouping: () for grouping, (?:) for non-capturing, \b (word boundary), and \B (non-word boundary).
Flags and Modifiers: (?i) for case-insensitivity.


Explanation:
Anchors: ^ and $ are used to specify positions (start or end of the string).
Quantifiers: *, +, ?, and {n,m} define how many times an element can be matched.
Character Classes: [ ] allows matching a set of characters. [^ ] is used to match characters that are not in the set.
Grouping and Capturing: ( ) is used to group parts of the regex or capture matches. (?: ) groups without capturing.
Special Characters: \d, \w, \s, etc., are shorthand for common character types like digits, words, and whitespace.

EXAMPLE:
Matching a phone number:
\d{3}-\d{3}-\d{4}
This will match a phone number in the format 123-456-7890.

Extracting email addresses:
\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b
This regex matches email addresses, like test@example.com.

Matching a word at the start or end of a string:
^\w+|\w+$
This matches the first word (^\w+) or the last word (\w+$).



---------------------------------------------------------------------------------------------------------

+-------------------+------------------------------------------------------------------+----------------------------------------------+
| Operator          | Description                                                      | Example                                      |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| .                 | Wildcard: Matches any character except a newline.                | `a.c` matches "abc", "axc", "a3c", etc.      |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| |                 | Alternation (OR): Matches the left or the right pattern.         | `cat|dog` matches "cat" or "dog".           |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| ^                 | Start of string anchor: Matches the start of the string.         | `^hello` matches "hello" at the start.      |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| $                 | End of string anchor: Matches the end of the string.             | `world$` matches "world" at the end.        |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| []                | Character class: Matches any one of the characters inside.       | `[abc]` matches "a", "b", or "c".           |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| [^]               | Negated character class: Matches anything except the listed chars| `[^abc]` matches anything but "a", "b", "c". |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| *                 | Matches 0 or more occurrences of the preceding element.          | `a*` matches "", "a", "aa", "aaa", etc.     |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| +                 | Matches 1 or more occurrences of the preceding element.          | `a+` matches "a", "aa", "aaa", etc.         |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| ?                 | Matches 0 or 1 occurrence of the preceding element.              | `a?` matches "", "a".                       |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| {n,m}             | Matches between n and m occurrences of the preceding element.    | `a{2,4}` matches "aa", "aaa", "aaaa".       |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| ()                | Groups expressions and captures the match.                      | `(abc)` captures "abc".                     |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| \                 | Escape special characters. Matches the literal character.        | `\.` matches a literal dot (".").           |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| \d                | Matches any digit (0-9).                                         | `\d` matches "3", "8", "0", etc.            |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| \w                | Matches any word character (letters, digits, underscore).       | `\w` matches "a", "b", "1", "_".            |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| \s                | Matches any whitespace character (spaces, tabs, newlines).       | `\s` matches " ", "\t", "\n".               |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| \b                | Word boundary: Matches position between word and non-word.      | `\bcat\b` matches "cat" in "a cat".         |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| (?=...)           | Positive lookahead: Matches if the group is followed by the pattern.| `\d(?=\D)` matches a digit followed by a non-digit. |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| (?!...)           | Negative lookahead: Matches if the group is **not** followed by the pattern.| `\d(?!\d)` matches a digit not followed by another digit. |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| (?<=...)          | Positive lookbehind: Matches if the group is preceded by the pattern.| `(?<=a)b` matches "b" only if preceded by "a". |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| (?<!...)          | Negative lookbehind: Matches if the group is **not** preceded by the pattern.| `(?<!a)b` matches "b" only if not preceded by "a". |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| \Z                | End of string anchor: Matches at the end of the string (allows for a trailing newline). | `abc\Z` matches "abc" at the very end. |
+-------------------+------------------------------------------------------------------+----------------------------------------------+
| \b{n}             | Matches exactly n occurrences of the previous element.          | `\d{3}` matches exactly 3 digits.           |
+-------------------+------------------------------------------------------------------+----------------------------------------------+





My Question: what are the different operators in regex like | is OR what else
In regular expressions (regex), there are several operators and special characters that define how the matching process works. Here's a list of the most common ones and their meanings:
+----+-----------------------------------+------------------------------------------------------------------+
| No | Operator                         | Description                                                      |
+----+-----------------------------------+------------------------------------------------------------------+
|  1 | Concatenation (Implicit)          | Matches characters in sequence without any special operator.     |
|    |                                   | Example: `abc` matches "abc".                                    |
+----+-----------------------------------+------------------------------------------------------------------+
|  2 | Alternation (OR) `|`              | Matches either the left or the right pattern.                    |
|    |                                   | Example: `cat|dog` matches "cat" or "dog".                       |
+----+-----------------------------------+------------------------------------------------------------------+
|  3 | Wildcard `.`                      | Matches any character except a newline.                          |
|    |                                   | Example: `a.c` matches "abc", "axc", etc.                        |
+----+-----------------------------------+------------------------------------------------------------------+
|  4 | Anchors `^`, `$`                  | `^` matches the start of the string.                              |
|    |                                   | `$` matches the end of the string.                               |
|    |                                   | Example: `^hello` matches "hello" at the start.                  |
|    |                                   | Example: `world$` matches "world" at the end.                    |
+----+-----------------------------------+------------------------------------------------------------------+
|  5 | Character Classes `[]`            | Matches any one of the characters inside the brackets.           |
|    |                                   | Example: `[abc]` matches "a", "b", or "c".                       |
+----+-----------------------------------+------------------------------------------------------------------+
|  6 | Negating Character Class `[^]`    | Matches any character except those listed inside the brackets.   |
|    |                                   | Example: `[^abc]` matches anything but "a", "b", or "c".         |
+----+-----------------------------------+------------------------------------------------------------------+
|  7 | Quantifiers `*`, `+`, `?`, `{n,m}`| `*` matches 0 or more occurrences of the preceding element.      |
|    |                                   | `+` matches 1 or more occurrences of the preceding element.      |
|    |                                   | `?` matches 0 or 1 occurrence of the preceding element.          |
|    |                                   | `{n,m}` matches between n and m occurrences of the preceding.    |
|    |                                   | Example: `a*` matches "", "a", "aa", etc.                        |
|    |                                   | Example: `a{2,4}` matches "aa", "aaa", "aaaa".                   |
+----+-----------------------------------+------------------------------------------------------------------+
|  8 | Grouping and Capturing `()`       | Groups expressions and captures the match.                       |
|    |                                   | Example: `(abc)` captures "abc".                                 |
+----+-----------------------------------+------------------------------------------------------------------+
|  9 | Non-Capturing Group `(?:...)`     | Groups expressions but **does not capture** the match.           |
|    |                                   | Example: `(?:abc)+` matches "abc", "abcabc", but doesn't capture.|
+----+-----------------------------------+------------------------------------------------------------------+
| 10 | Escape Character `\`              | Escapes special characters and matches them literally.           |
|    |                                   | Example: `\.` matches a literal dot (`.`).                       |
+----+-----------------------------------+------------------------------------------------------------------+
| 11 | Word Boundaries `\b`, `\B`        | `\b` matches a word boundary (between a word character and non-word).|
|    |                                   | `\B` matches a non-word boundary.                                |
|    |                                   | Example: `\bcat\b` matches "cat" in "a cat", but not "scattered".|
+----+-----------------------------------+------------------------------------------------------------------+
| 12 | Lookahead and Lookbehind `(?=...)`, `(?!...)`, `(?<=...)`, `(?<!...)`| Checks if a pattern is followed or preceded by another. |
|    |                                   | `(?=...)` is Positive Lookahead.                                 |
|    |                                   | `(?!...)` is Negative Lookahead.                                 |
|    |                                   | `(?<=...)` is Positive Lookbehind.                               |
|    |                                   | `(?<!...)` is Negative Lookbehind.                               |
|    |                                   | Example: `\d(?=\D)` matches a digit followed by a non-digit.     |
|    |                                   | Example: `\d(?!\d)` matches a digit **not** followed by another digit. |
+----+-----------------------------------+------------------------------------------------------------------+
| 13 | Atomic Groups `(?>...)`           | Prevents backtracking once a match is found.                     |
|    |                                   | Example: `(?>abc)+` matches "abc", "abcabc", but doesn't backtrack. |
+----+-----------------------------------+------------------------------------------------------------------+
| 14 | End of String `\Z`                | Matches the position at the very end of the string.              |
|    |                                   | Example: `abc\Z` matches "abc" at the very end of the string.    |
+----+-----------------------------------+------------------------------------------------------------------+
Summary of the Points:
Concatenation (Implicit): Direct sequence of characters.
Alternation (|): OR condition, matches either the left or right pattern.
Wildcard (.): Matches any character except newline.
Anchors (^, $): Match positions at the start or end of the string.
Character Classes ([]): Match any one of the listed characters.
Negating Character Class ([^]): Match any character except the listed ones.
Quantifiers (*, +, ?, {n,m}): Control the number of occurrences for matching.
Grouping and Capturing (()): Group and capture patterns.
Non-Capturing Group ((?:...)): Group without capturing the match.
Escape Character (\): Escape special characters.
Word Boundaries (\b, \B): Match the boundaries of words or non-words.
Lookahead/Lookbehind ((?=...), (?!...), (?<=...), (?<!...)): Check for a pattern before or after the current position.
Atomic Groups ((?>...)): Prevent backtracking within the group.
